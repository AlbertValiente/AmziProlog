/****************************************************************************
* 
* inc.h - global includes
* 
* Copyright (c) 1992-2009 by Amzi! inc.  All Rights Reserved.
* 
****************************************************************************/

// Amzi! string & character
#if defined(_UNICODE)
#ifndef UNICODE
#define UNICODE          // for the Windows routines that use it instead
#endif
#endif

#ifdef WINDOWS
// disable warning C4786: symbol greater than 255 character,
// okay to ignore, generated by STL classes
// note that the problem with turning this off is someone down
// deep in MS land turns it back on, and a news group user
// suspects its yvals, so this solution.
#pragma warning( disable : 4786 )
#include <yvals.h>
#pragma warning( disable : 4786 )
//
#endif
  
#include "env.h"         // environment dependent flags 
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <stdarg.h>
#include <fcntl.h>
#include <string.h>
#ifdef BSD
#include <stddef.h>
#endif
#include <locale.h>
#include <iostream>
#include <fstream>

//#ifdef WINDOWS
// For server checking in keys
// nope removed for 64-bit systems
//#include "winsock2.h"
//#include "iphlpapi.h"
//#include "iprtrmib.h"
//#endif

#ifdef WINDOWS
//#if defined(WINDOWS) && defined(_DEBUG)
//#include <afx.h>    // used for memory debugging
//#endif

// disable warning C4786: symbol greater than 255 character,
// okay to ignore, generated by STL classes
// note that the problem with turning this off is someone down
// deep in MS land turns it back on, and a news group user
// suspects its yvals, so this solution.
#pragma warning( disable : 4786 )
#include <yvals.h>
#pragma warning( disable : 4786 )
//#include <Lmcons.h>
// disable deprecated warnings
#pragma warning(disable : 4996)
#endif

#include <map>    // stl mapping, used in module
#include <vector>  // used in lload
#include <list>    // used in module
#include <exception>

#ifdef WINDOWS
// disable warning C4786: symbol greater than 255 character,
// okay to ignore, generated by STL classes
// note that the problem with turning this off is someone down
// deep in MS land turns it back on, and a news group user
// suspects its yvals, so this solution.
#pragma warning( disable : 4786 )
#include <yvals.h>
#pragma warning( disable : 4786 )
#endif

#ifdef   UNIX
#include <unistd.h>   // to get the computer name
#include <ctype.h>
#include <wchar.h>
#ifndef HPUX
#include <wctype.h>
#endif
#endif

#if defined(SOLARIS) && ! defined(GNU)
#include <widec.h>
#endif

#ifdef   WINDOWS
#include <ctype.h>
#include <windows.h>
#include <dos.h>
#include <io.h>
#include <conio.h>
//#include <malloc.h>  // used by resetstackoverflow in cell.cpp term_size
//#include <Secext.h>
//#define SECURITY_WIN32
//#include <Security.h>
#endif

// appears as if sstream not available for Sun gcc
#if !(defined(SOLARIS) && defined(GNU))
#include <string>   // used for load from memory
#include <sstream>
#endif

#include <iomanip>

//#include <cstdlib>
//#if ! defined(SOLARIS) && ! defined(GNU)
//#include <sstream>
//#endif

// and once more for good luck
#ifdef WINDOWS
#pragma warning( disable : 4786 )
#endif

//#ifdef WINSTDIO
//#include <iostream.h>
//#endif

#include "debug.h"     // debugging flags
#include "defs.h"      // basic types and definitions
#include "lenv.h"      // environment-specific functions
#include "ddbmem.h"    // Memory Management
#include "except.h"    // LExcept
#include "llist.h"     // LsList
#include "lstring.h"   // LString
//#include "ldouble.h"   // LDouble
#include "fixed.h"     // fixedC
#include "lreal.h"      // Reals
#include "cell.h"      // Cell info
#include "gcthing.h"   // GC Things
#include "ini.h"       // LIni
#include "stash.h"     // Stashes

//#include "sio.h"       // IO functions
//#include "log.h"       // LLog
#include "pstring.h"   // PString
#include "engine.h"    // LEngine
#include "lexec.h"     // Prove
#include "lload.h"     // Loader
#include "control.h"   // Control stack
#include "tsread.h"    // Term Reader
#include "atomtable.h" // Atom Table
#include "module.h"    // Modules
#include "ddb.h"       // Dynamic Database
#include "termsvc.h"   // Term Services
#include "lmath.h"     // Math Routines
#include "tswrite.h"   // Term Writer
#include "hxl.h"       // Heap, XVars, Local
#include "lsthread.h"  // Threaded ExecStr support
#include "main.h"      // Main API C-Interface
#include "ddbmem.h"    // Dynamic Database Memory
#include "streams.h"
#include "lex.h"       // Lexical
#include "builtins.h"  // Built-in Predicates
#include "probe.h"     // Internal Perforance Probe






