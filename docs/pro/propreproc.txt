                          PREPROCESSOR.
		  
		  Pre-processing is an ephemeral activity that takes place at
		  read time, and none of the controls are ever seen by prolog. 
		  It's purpose is to tailor a program for a specific
		  environment, facilitate code sharing, and to provide succint 
		  denotations (and hiding) of more complex code. It is based on
		  the syntax and semantics of the C preprocessor, with a few 
		  extensions.  Preprocessor expressions are written in C 
		  functional style, not Prolog relational style. For example:
		  #if defined(LINUX) || defined(BSD)     // comment
		  not:
		  #if defined(LINUX) ; defined(BSD)      % comment
		  which allows C preprocessor controls to be transcribed 
        directly to Prolog. However, expanded macro definitions are 
		  read by Prolog and must be valid Prolog syntax, so the
		  use of extant C macros beyond simple values and bit masks 
		  requires careful consideration.

CONTROLS:

		  A preprocessor control directive is denoted by '#' in
		  column one:

		  #if, #ifdef, #ifndef, #else, #elif, #endif, #include,
		  #define, #undef, #error.

		  Controls can be block commented out.

		  #ifdef searches for both prolog macros and system macros.

#define 
		  defines a global macro which will be stored by prolog.
		  There can only be one macro with a given name. 

		  A macro is strictly text replacement, expanded at load time
		  so the arguments are text, not values, and there is no other
		  environment. A macro body should not contain text that denotes 
		  free Prolog variables, ie. variables that are not the names of
		  it's own arguments or the names of other macros, unless it is 
		  defining a self-contained clause to be asserted.

		  It consists of two parts, the definiend (head) and the 
		  definition (body). The definiend has a name and parameters, 
		  all of which must conform to prolog syntax for variables; 
		  but they are neither, they are just names. There is a limit 
		  of 15 parameters.  Each argument takes up size+1 space and the
		  total space available is only 64.  This helps to ensure that a 
		  definiend does not need more than one line of text. 

		  There are two ways to denote no parameters: either there is no 
		  parameter nest or there is an empty parameter nest to look like 
		  a void function. Both have arity zero but the latter will be 
		  flagged as 'niladic'.
		  
		  The rest of the line following the definiend is the definition,
		  which shall be text, possibly containing references to
		  parameter names. The definition is delimited by a line feed symbol, 
		  but may employ a backslash symbol to shield a linefeed from view. 
		  Then both the backslash symbol and the linefeed are elided. Thus, 
		  the definition is stored as a single line of text with no 
		  particular limit on size. 

		  When the definition is read in, parameter name references are 
		  replaced by indexed references, which consist of the special 
		  character '#', followed by a single hex digit denoting the 
		  parameter number. Parameter names are not saved, from then on
		  the parameters are anonymous. This makes for efficient scanning 
		  at reference time, it eliminates name clashes between formal 
		  macro parameters and the environment, and it allows parameter 
		  references to be adjacent without the macro concatenation 
		  operator (##). However, the macro concatenation operator is 
		  still supported when it follows a named parameter reference.
		  Within a definition '#' never denotes a control directive and it
		  is only interpreted if it is immediately followed by a hex digit.  
		  The stringizer operator is not supported. A parameter reference 
		  outside the declared arity range of that macro is an error.
		  
		  For greater efficiency and compactness, the user may use 
		  anonymous parameter references directly, using a definiend of
		  the form <name>/arity, but doing so forfeits the use of default
		  values. 

		  A macro reference is a lexeme which is the name of a defined macro, 
		  possibly followed by nested arguments. It is never seen by Prolog.
		  When a macro reference is encountered at load time it is 
		  replaced by the macro definition, which itself is expanded by 
		  replacing parameter references by arguments, and the result is 
		  expected to be a fragment of syntactically acceptable prolog. 

		  There is no particular limit to the size of a macro argument but
		  it must be balanced with respect to quotes and nest characters 
		  (so we can find the delimiter!). There is no syntactic reason
		  for the definition itself to be balanced, but an unbalanced
		  macro would be highly context dependent.

		  Macros can be variadic. If a macro is defined to have arguments 
		  then a reference to it will succeed no matter how many arguments 
		  are supplied. If not enough arguments are supplied the missing 
		  ones will be ascribed the value 'NULL'. (To supply an argument 
		  after omitted arguments use empty comma slots.) If too many 
		  arguments are supplied then the last macro parameter gets them 
		  all as a comma tree.  

		  Parameters may have default argument values. The syntax is:
					<parameter name> = <default argument>
		  The default argument has the same balance restrictions as an
		  argument, and has no particular limit on size except that the
		  definiend must still fit on one line. A reference to a NULL
		  argument will pick up the default argument, if there is one.

		  A macro definition may contain references to other macros.

		  Some macros are pre-defined because they are are 'dynamic'.
		  Their semantics are not constant text but depend upon hidden 
		  code at expansion time. The repacement text may be null, eg:

		  enum/0 
					<name>(optional) { <enum list> }
					Each element of the enum list will be defined to 
					be a macro denoting an integer. The integer may be 
					explicitly specified by assignment syntax or it may 
					implicitly take the value one greater than the 
					previous element. The first element is implicitly 0.
					If <name> is supplied then it will become the name
					of a macro whose body denotes a (Prolog) list of 
		   		integers from the enum list.


		  The following macros are pre-defined.

		  __DATE__             expansion date

		  __TIME__             expansion time

		  IFNULL(A, B, C)      if A is NULL then the definition is B, else C
		                       (C text may include parameter A; B text may not.) 

		  enum                 scans the following text as an enum declaration
                             in C syntax, and spawns macros for every name,
		                       so that C enum integer constants are available
		                       (globally) in Prolog.

#include
		  An include directive has the same syntax as C #include directives
		  and behaves like a Prolog consult statement.  However, if the 
		  include file name does not have the extension '.pro' then 
		  everything in that file is ignored except preprocessor directives 
		  and enum declarations.



